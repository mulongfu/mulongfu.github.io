<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python與工業儀器-透過Modbus RTU RS485</title>
    <url>/2023/04/28/Python%E8%88%87%E5%B7%A5%E6%A5%AD%E5%84%80%E5%99%A8-%E9%80%8F%E9%81%8EModbus%20RTU%20RS485/</url>
    <content><![CDATA[<h1 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h1><p>最近做完一個工業類的案子，案主有一個廢水處理廠，需要隨時隨地監控這個廢水池中溫度、溶氧量、pH等數值。</p>
<h1 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h1><p>這案子要做的有硬體安裝配線與軟體開發，最後是硬體與軟體的溝通。</p>
<h2 id="硬體部分"><a href="#硬體部分" class="headerlink" title="硬體部分"></a>硬體部分</h2><p>主要硬體有</p>
<ul>
<li>溫度計</li>
<li>溶氧計</li>
<li>酸鹼值計</li>
<li>馬達<br>前三個硬體都支援RS485標準，沒太大問題。最後一項馬達，要檢測他處於<strong>On</strong>還是<strong>Off</strong>狀態。在淘寶淘了個電流檢測器，當電流大於某個閾值，即為<strong>On</strong>。<br>而這些硬體的安裝、配線接線等是其他人負責。我主要負責軟體。</li>
</ul>
<h2 id="軟體"><a href="#軟體" class="headerlink" title="軟體"></a>軟體</h2><p>Python中關於RS485的有<strong>serial</strong>和<strong>modbus_tk</strong>，直接拿來用就好，問題不大。<br>以下是code snippet:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def mod(sensor_type, id=1, dc_loc=&quot;&quot;, PORT=&quot;com3&quot;):</span><br><span class="line">    red = []</span><br><span class="line">    alarm = &quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        master = modbus_rtu.RtuMaster(serial.Serial(port=PORT, baudrate=19200, bytesize=8, parity=&#x27;N&#x27;, stopbits=1))</span><br><span class="line">        master.set_timeout(5.0)</span><br><span class="line">        master.set_verbose(True)</span><br><span class="line">        if sensor_type == &#x27;temp&#x27;:</span><br><span class="line">            # id 03 00 8A 00 01, read PV</span><br><span class="line">            pv_value = master.execute(id, cst.READ_HOLDING_REGISTERS, 138, 1)[0] / 10</span><br><span class="line">            print(f&quot;id: &#123;id&#125;, Current PV: &#123;pv_value&#125;&quot;)</span><br><span class="line">            alarm = &quot;正常&quot;</span><br><span class="line">            return pv_value</span><br><span class="line">        elif sensor_type == &#x27;ph&#x27; or sensor_type == &#x27;do&#x27;:</span><br><span class="line">            # id 03 00 35 00 02, read ph</span><br><span class="line">            value = ReadFloat(master.execute(id, cst.READ_HOLDING_REGISTERS, 53, 2))</span><br><span class="line">            print(f&quot;id: &#123;id&#125;, Current &#123;sensor_type&#125; value: &#123;value&#125;&quot;)</span><br><span class="line">            alarm = &quot;正常&quot;</span><br><span class="line">            return value</span><br><span class="line"></span><br><span class="line">        elif sensor_type == &#x27;motor&#x27;:</span><br><span class="line">            # 01 03 00 dc_loc 00 02, read ph</span><br><span class="line">            value = master.execute(10, cst.READ_HOLDING_REGISTERS, int(dc_loc,16), 2)</span><br><span class="line">            print(f&quot;id: &#123;int(dc_loc,16)&#125;, Current &#123;sensor_type&#125; value: &#123;value&#125;&quot;)</span><br><span class="line">            alarm = &quot;正常&quot;</span><br><span class="line">            return round(value[0]/1000, 2)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;something error!&quot;)        </span><br><span class="line">            return alarm</span><br><span class="line"></span><br><span class="line">    except Exception as exc:</span><br><span class="line">        print(str(exc))</span><br><span class="line">        alarm = (str(exc))</span><br><span class="line">        return red, alarm</span><br></pre></td></tr></table></figure>
<p>基本上只要看儀器的說明書，就能知道要讀取的數值的位置。<br>比較特別的地方是，pH和溶氧計的返回值需要用<strong>IEEE-754</strong>去decode。<br>而馬達部分則是讀取DC value，超過一定值便判定馬達<strong>On</strong></p>
<h3 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h3><p>後端採用Django，將收到的數值做一些美化和圖表。Django的主題不再本文的討論範圍，有興趣的讀者可自行查閱相關文章。</p>
<h1 id="最終結果"><a href="#最終結果" class="headerlink" title="最終結果"></a>最終結果</h1><h2 id="首頁"><a href="#首頁" class="headerlink" title="首頁"></a>首頁</h2><p><img src="https://imgur.com/P4lXABi.png"></p>
<h2 id="圖表"><a href="#圖表" class="headerlink" title="圖表"></a>圖表</h2><p><img src="https://imgur.com/tR33KRK.png"></p>
]]></content>
      <categories>
        <category>接案二三事</category>
      </categories>
      <tags>
        <tag>兼職</tag>
        <tag>接案</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[Leetcode] Binary Search - (Easy)704、(Medium)34</title>
    <url>/2023/05/06/%5BLeetcode%5D%20Binary%20Search%20-%20(Easy)704%E3%80%81(Medium)34/</url>
    <content><![CDATA[<h2 id="704-Binary-Search"><a href="#704-Binary-Search" class="headerlink" title="704. Binary Search"></a><a href="https://leetcode.com/problems/binary-search/">704. Binary Search</a></h2><p>一個簡單的Binary Search，須注意邊界條件。這邊我使用的是左閉右閉:<br><strong>[left, right]</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// for(auto i : nums) cout &lt;&lt; i &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (target == nums[mid])</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                <span class="comment">// target在左半邊</span></span><br><span class="line">                <span class="comment">//因為left&lt;=right, 目前的nums[mid]一定不是target, 所以右邊界-1</span></span><br><span class="line">                right = mid - <span class="number">1</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// target在右半邊</span></span><br><span class="line">                <span class="comment">//因為left&lt;=right, 目前的nums[mid]一定不是target, 所以左邊界+1</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. Find First and Last Position of Element in Sorted Array</a></h2><p>這題給定一個vector，vector內的數字有可能重複，若target在vector內，則列出target在vector中，開始和結束的index。若不在，則output[-1, -1]</p>
<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure>

<p>直覺想法是，先找出target在不在vector內，如果在的話，則用兩個variable，再找target的起點和終點。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (target == nums[mid] &amp;&amp; !found)</span><br><span class="line">            &#123;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> start = mid, end = mid;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span>(start &gt;= <span class="number">0</span> &amp;&amp; nums[start] == target)&#123;</span><br><span class="line">                    --start;</span><br><span class="line">                &#125;</span><br><span class="line">                ++start; <span class="comment">//多減了,要加回去</span></span><br><span class="line">                <span class="keyword">while</span>(end &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[end] == target)&#123;</span><br><span class="line">                    ++end;</span><br><span class="line">                &#125;</span><br><span class="line">                --end; <span class="comment">//多加了,要減回去</span></span><br><span class="line"></span><br><span class="line">                res.<span class="built_in">push_back</span>(start);</span><br><span class="line">                res.<span class="built_in">push_back</span>(end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!found)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>利用pyodbc讀寫Microsoft Access</title>
    <url>/2023/04/01/%E5%88%A9%E7%94%A8pyodbc%E8%AE%80%E5%AF%ABMicrosoft%20Access/</url>
    <content><![CDATA[<h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>最近接到一個小案子，案主是簡訊收發平台，他需要讀取本地資料庫的簡訊內容，增加客製字串後，再存入相同的資料庫。不難的case，但報酬不差，換算時薪約NT5,000，因此記錄一下案子內容。</p>
<h2 id="讀取Microsoft-Access"><a href="#讀取Microsoft-Access" class="headerlink" title="讀取Microsoft Access"></a>讀取Microsoft Access</h2><p>平台是Windows，使用的套件是pyodbc，使用前可能需安裝<a href="https://www.microsoft.com/zh-tw/download/details.aspx?id=13255">Microsoft Access Database Engine 2010 可轉散發套件</a></p>
<p>首先讀取mdb file，並製作轉換pattern的Dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up DB info</span></span><br><span class="line">default_MDB = <span class="string">&quot;./SMS.mdb&quot;</span></span><br><span class="line">mdb = <span class="built_in">input</span>(<span class="string">&quot;Please enter SMS.mdb path: &quot;</span>) <span class="keyword">or</span> default_MDB</span><br><span class="line">drv = <span class="string">&quot;&#123;Microsoft Access Driver (*.mdb, *.accdb)&#125;&quot;</span></span><br><span class="line">pwd = <span class="string">&quot;gd2013&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to DB</span></span><br><span class="line">con = pyodbc.connect(<span class="string">&quot;DRIVER=&#123;&#125;;DBQ=&#123;&#125;;PWD=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(drv, mdb, pwd))</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create dict of pattern</span></span><br><span class="line">regex_pattern_list = parse_pattern()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create dict of direct pattern</span></span><br><span class="line">pattern_replace_list = parse_direct_pattern()</span><br></pre></td></tr></table></figure>

<p>之後，用pandas做資料處理，並將結果存回資料庫(mdb)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(datetime.datetime.now()))</span><br><span class="line">    <span class="comment"># Query DB</span></span><br><span class="line">    SQL = <span class="string">&quot;SELECT * FROM L_SMS ORDER BY id&quot;</span></span><br><span class="line">    cur.execute(SQL)</span><br><span class="line">    all_tuple = cur.fetchall()</span><br><span class="line">    desc = cur.description</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read into dataframe</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Read database: <span class="subst">&#123;mdb&#125;</span> infomation&quot;</span>)</span><br><span class="line">    df_column = pd.DataFrame(desc)</span><br><span class="line">    all_list = [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> all_tuple]</span><br><span class="line">    df = pd.DataFrame(all_list, columns=df_column[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Create dict of pattern</span></span><br><span class="line">    <span class="keyword">for</span> idx, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(regex_pattern_list):</span><br><span class="line">        x[<span class="string">&quot;id&quot;</span>] = idx            </span><br><span class="line">        x[<span class="string">&quot;pattern_count&quot;</span>] = (</span><br><span class="line">            df[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">            .<span class="built_in">str</span>.contains(<span class="string">r&quot;^&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x[<span class="string">&quot;regex_to_be_replaced&quot;</span>]))</span><br><span class="line">            .<span class="built_in">sum</span>()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Start to find and replace pattern</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> regex_pattern_list:</span><br><span class="line">        <span class="comment"># print(x[&#x27;regex_to_be_replaced&#x27;])</span></span><br><span class="line">        <span class="keyword">if</span> x[<span class="string">&quot;pattern_count&quot;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;Found pattern: &#x27;<span class="subst">&#123;x[<span class="string">&#x27;regex_to_be_replaced&#x27;</span>]&#125;</span>&#x27;, Start replacing with &#x27;<span class="subst">&#123;x[<span class="string">&#x27;regex_placed&#x27;</span>]&#125;</span>&#x27;, count: <span class="subst">&#123;x[<span class="string">&#x27;pattern_count&#x27;</span>]&#125;</span>...&quot;</span></span><br><span class="line">            )</span><br><span class="line">            re_express = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x[<span class="string">&quot;regex_to_be_replaced&quot;</span>])</span><br><span class="line">            re_express_1 = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x[<span class="string">&quot;regex_placed&quot;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;re_express: <span class="subst">&#123;re_express&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;re_express_1: <span class="subst">&#123;re_express_1&#125;</span>&quot;</span>)</span><br><span class="line">            df[<span class="string">&quot;content&quot;</span>] = df[<span class="string">&quot;content&quot;</span>].<span class="built_in">str</span>.replace(</span><br><span class="line">                re_express, re_express_1, regex=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Write into database</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Write updated text into database: <span class="subst">&#123;mdb&#125;</span>&quot;</span>)</span><br><span class="line">            df_dict = df.to_dict()</span><br><span class="line">            id_list = []</span><br><span class="line">            content_list = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;id&quot;</span>].items():</span><br><span class="line">                id_list.append(v)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;content&quot;</span>].items():</span><br><span class="line">                content_list.append(v)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">id</span>, content <span class="keyword">in</span> <span class="built_in">zip</span>(id_list, content_list):</span><br><span class="line">                cur.execute(</span><br><span class="line">                    <span class="string">&quot;UPDATE L_SMS SET content = ? WHERE id = ?&quot;</span>, content, <span class="built_in">id</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            con.commit()  <span class="comment"># commit to database</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Normal pattern find and replace done!&quot;</span>)</span><br><span class="line">            <span class="comment"># cur.close()</span></span><br><span class="line">            <span class="comment"># con.close()</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(direct_pattern[&quot;direct_pattern_count&quot;])</span></span><br><span class="line">        <span class="keyword">for</span> idx, direct_pattern <span class="keyword">in</span> <span class="built_in">enumerate</span>(pattern_replace_list):</span><br><span class="line">            direct_pattern[<span class="string">&quot;direct_pattern_count&quot;</span>] = (</span><br><span class="line">            df[<span class="string">&quot;content&quot;</span>].<span class="built_in">str</span>.contains(<span class="string">r&quot;^&#123;&#125;&quot;</span>.<span class="built_in">format</span>(direct_pattern[<span class="string">&quot;pattern&quot;</span>])).<span class="built_in">sum</span>()</span><br><span class="line">            )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Start to find and replace direct pattern</span></span><br><span class="line">        <span class="keyword">for</span> direct_pattern <span class="keyword">in</span> pattern_replace_list:</span><br><span class="line">            <span class="comment"># print(direct_pattern[&quot;direct_pattern_count&quot;])</span></span><br><span class="line">            <span class="comment"># print(x[&#x27;regex_to_be_replaced&#x27;])</span></span><br><span class="line">            <span class="keyword">if</span> direct_pattern[<span class="string">&quot;direct_pattern_count&quot;</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> direct_pattern[<span class="string">&#x27;handle&#x27;</span>] == <span class="literal">False</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;Found pattern: &#x27;<span class="subst">&#123;direct_pattern[<span class="string">&#x27;pattern&#x27;</span>]&#125;</span>&#x27;, Start replacing with &#x27;<span class="subst">&#123;direct_pattern[<span class="string">&#x27;replaced&#x27;</span>]&#125;</span>&#x27;, count: <span class="subst">&#123;direct_pattern[<span class="string">&#x27;direct_pattern_count&#x27;</span>]&#125;</span>...&quot;</span></span><br><span class="line">                )</span><br><span class="line">                re_express = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(direct_pattern[<span class="string">&quot;pattern&quot;</span>])</span><br><span class="line">                re_express_1 = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(direct_pattern[<span class="string">&quot;replaced&quot;</span>])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;re_express: <span class="subst">&#123;re_express&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;re_express_1: <span class="subst">&#123;re_express_1&#125;</span>&quot;</span>)</span><br><span class="line">                df[<span class="string">&quot;content&quot;</span>] = df[<span class="string">&quot;content&quot;</span>].<span class="built_in">str</span>.replace(</span><br><span class="line">                    re_express, re_express_1, regex=<span class="literal">True</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Write into database</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Write updated text into database: <span class="subst">&#123;mdb&#125;</span>&quot;</span>)</span><br><span class="line">                df_dict = df.to_dict()</span><br><span class="line">                id_list = []</span><br><span class="line">                content_list = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;id&quot;</span>].items():</span><br><span class="line">                    id_list.append(v)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;content&quot;</span>].items():</span><br><span class="line">                    content_list.append(v)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">id</span>, content <span class="keyword">in</span> <span class="built_in">zip</span>(id_list, content_list):</span><br><span class="line">                    cur.execute(</span><br><span class="line">                        <span class="string">&quot;UPDATE L_SMS SET content = ? WHERE id = ?&quot;</span>, content, <span class="built_in">id</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                con.commit()  <span class="comment"># commit to database</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Direct pattern find and replace done!&quot;</span>)</span><br><span class="line">                direct_pattern[<span class="string">&#x27;handle&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">                <span class="comment"># cur.close()</span></span><br><span class="line">                <span class="comment"># con.close()</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>執行前，資料庫內有兩筆record符合我們的pattern<br><img src="https://i.imgur.com/b1b0K9F.png"></p>
<p>執行後，可那兩筆record已經被修改<br><img src="https://i.imgur.com/yf6UrMJ.png"></p>
<p>執行中<br><img src="https://i.imgur.com/9yPxqEf.png"></p>
<p><a href="https://github.com/mulongfu/SMS">Github Repo完整程式碼</a></p>
]]></content>
      <categories>
        <category>接案二三事</category>
      </categories>
      <tags>
        <tag>兼職</tag>
        <tag>接案</tag>
      </tags>
  </entry>
</search>
