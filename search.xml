<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用pyodbc讀寫Microsoft Access</title>
    <url>/2023/04/01/%E5%88%A9%E7%94%A8pyodbc%E8%AE%80%E5%AF%ABMicrosoft%20Access/</url>
    <content><![CDATA[<h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>最近接到一個小案子，案主是簡訊收發平台，他需要讀取本地資料庫的簡訊內容，增加客製字串後，再存入相同的資料庫。不難的case，但報酬不差，換算時薪約NT5,000，因此記錄一下案子內容。</p>
<h2 id="讀取Microsoft-Access"><a href="#讀取Microsoft-Access" class="headerlink" title="讀取Microsoft Access"></a>讀取Microsoft Access</h2><p>平台是Windows，使用的套件是pyodbc，使用前可能需安裝<a href="https://www.microsoft.com/zh-tw/download/details.aspx?id=13255">Microsoft Access Database Engine 2010 可轉散發套件</a></p>
<p>首先讀取mdb file，並製作轉換pattern的Dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up DB info</span></span><br><span class="line">default_MDB = <span class="string">&quot;./SMS.mdb&quot;</span></span><br><span class="line">mdb = <span class="built_in">input</span>(<span class="string">&quot;Please enter SMS.mdb path: &quot;</span>) <span class="keyword">or</span> default_MDB</span><br><span class="line">drv = <span class="string">&quot;&#123;Microsoft Access Driver (*.mdb, *.accdb)&#125;&quot;</span></span><br><span class="line">pwd = <span class="string">&quot;gd2013&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to DB</span></span><br><span class="line">con = pyodbc.connect(<span class="string">&quot;DRIVER=&#123;&#125;;DBQ=&#123;&#125;;PWD=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(drv, mdb, pwd))</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create dict of pattern</span></span><br><span class="line">regex_pattern_list = parse_pattern()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create dict of direct pattern</span></span><br><span class="line">pattern_replace_list = parse_direct_pattern()</span><br></pre></td></tr></table></figure>

<p>之後，用pandas做資料處理，並將結果存回資料庫(mdb)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(datetime.datetime.now()))</span><br><span class="line">    <span class="comment"># Query DB</span></span><br><span class="line">    SQL = <span class="string">&quot;SELECT * FROM L_SMS ORDER BY id&quot;</span></span><br><span class="line">    cur.execute(SQL)</span><br><span class="line">    all_tuple = cur.fetchall()</span><br><span class="line">    desc = cur.description</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read into dataframe</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Read database: <span class="subst">&#123;mdb&#125;</span> infomation&quot;</span>)</span><br><span class="line">    df_column = pd.DataFrame(desc)</span><br><span class="line">    all_list = [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> all_tuple]</span><br><span class="line">    df = pd.DataFrame(all_list, columns=df_column[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Create dict of pattern</span></span><br><span class="line">    <span class="keyword">for</span> idx, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(regex_pattern_list):</span><br><span class="line">        x[<span class="string">&quot;id&quot;</span>] = idx            </span><br><span class="line">        x[<span class="string">&quot;pattern_count&quot;</span>] = (</span><br><span class="line">            df[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">            .<span class="built_in">str</span>.contains(<span class="string">r&quot;^&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x[<span class="string">&quot;regex_to_be_replaced&quot;</span>]))</span><br><span class="line">            .<span class="built_in">sum</span>()</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Start to find and replace pattern</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> regex_pattern_list:</span><br><span class="line">        <span class="comment"># print(x[&#x27;regex_to_be_replaced&#x27;])</span></span><br><span class="line">        <span class="keyword">if</span> x[<span class="string">&quot;pattern_count&quot;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;Found pattern: &#x27;<span class="subst">&#123;x[<span class="string">&#x27;regex_to_be_replaced&#x27;</span>]&#125;</span>&#x27;, Start replacing with &#x27;<span class="subst">&#123;x[<span class="string">&#x27;regex_placed&#x27;</span>]&#125;</span>&#x27;, count: <span class="subst">&#123;x[<span class="string">&#x27;pattern_count&#x27;</span>]&#125;</span>...&quot;</span></span><br><span class="line">            )</span><br><span class="line">            re_express = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x[<span class="string">&quot;regex_to_be_replaced&quot;</span>])</span><br><span class="line">            re_express_1 = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x[<span class="string">&quot;regex_placed&quot;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;re_express: <span class="subst">&#123;re_express&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;re_express_1: <span class="subst">&#123;re_express_1&#125;</span>&quot;</span>)</span><br><span class="line">            df[<span class="string">&quot;content&quot;</span>] = df[<span class="string">&quot;content&quot;</span>].<span class="built_in">str</span>.replace(</span><br><span class="line">                re_express, re_express_1, regex=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Write into database</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Write updated text into database: <span class="subst">&#123;mdb&#125;</span>&quot;</span>)</span><br><span class="line">            df_dict = df.to_dict()</span><br><span class="line">            id_list = []</span><br><span class="line">            content_list = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;id&quot;</span>].items():</span><br><span class="line">                id_list.append(v)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;content&quot;</span>].items():</span><br><span class="line">                content_list.append(v)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">id</span>, content <span class="keyword">in</span> <span class="built_in">zip</span>(id_list, content_list):</span><br><span class="line">                cur.execute(</span><br><span class="line">                    <span class="string">&quot;UPDATE L_SMS SET content = ? WHERE id = ?&quot;</span>, content, <span class="built_in">id</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            con.commit()  <span class="comment"># commit to database</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Normal pattern find and replace done!&quot;</span>)</span><br><span class="line">            <span class="comment"># cur.close()</span></span><br><span class="line">            <span class="comment"># con.close()</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(direct_pattern[&quot;direct_pattern_count&quot;])</span></span><br><span class="line">        <span class="keyword">for</span> idx, direct_pattern <span class="keyword">in</span> <span class="built_in">enumerate</span>(pattern_replace_list):</span><br><span class="line">            direct_pattern[<span class="string">&quot;direct_pattern_count&quot;</span>] = (</span><br><span class="line">            df[<span class="string">&quot;content&quot;</span>].<span class="built_in">str</span>.contains(<span class="string">r&quot;^&#123;&#125;&quot;</span>.<span class="built_in">format</span>(direct_pattern[<span class="string">&quot;pattern&quot;</span>])).<span class="built_in">sum</span>()</span><br><span class="line">            )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Start to find and replace direct pattern</span></span><br><span class="line">        <span class="keyword">for</span> direct_pattern <span class="keyword">in</span> pattern_replace_list:</span><br><span class="line">            <span class="comment"># print(direct_pattern[&quot;direct_pattern_count&quot;])</span></span><br><span class="line">            <span class="comment"># print(x[&#x27;regex_to_be_replaced&#x27;])</span></span><br><span class="line">            <span class="keyword">if</span> direct_pattern[<span class="string">&quot;direct_pattern_count&quot;</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> direct_pattern[<span class="string">&#x27;handle&#x27;</span>] == <span class="literal">False</span>:</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;Found pattern: &#x27;<span class="subst">&#123;direct_pattern[<span class="string">&#x27;pattern&#x27;</span>]&#125;</span>&#x27;, Start replacing with &#x27;<span class="subst">&#123;direct_pattern[<span class="string">&#x27;replaced&#x27;</span>]&#125;</span>&#x27;, count: <span class="subst">&#123;direct_pattern[<span class="string">&#x27;direct_pattern_count&#x27;</span>]&#125;</span>...&quot;</span></span><br><span class="line">                )</span><br><span class="line">                re_express = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(direct_pattern[<span class="string">&quot;pattern&quot;</span>])</span><br><span class="line">                re_express_1 = <span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(direct_pattern[<span class="string">&quot;replaced&quot;</span>])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;re_express: <span class="subst">&#123;re_express&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;re_express_1: <span class="subst">&#123;re_express_1&#125;</span>&quot;</span>)</span><br><span class="line">                df[<span class="string">&quot;content&quot;</span>] = df[<span class="string">&quot;content&quot;</span>].<span class="built_in">str</span>.replace(</span><br><span class="line">                    re_express, re_express_1, regex=<span class="literal">True</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Write into database</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Write updated text into database: <span class="subst">&#123;mdb&#125;</span>&quot;</span>)</span><br><span class="line">                df_dict = df.to_dict()</span><br><span class="line">                id_list = []</span><br><span class="line">                content_list = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;id&quot;</span>].items():</span><br><span class="line">                    id_list.append(v)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> df_dict[<span class="string">&quot;content&quot;</span>].items():</span><br><span class="line">                    content_list.append(v)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">id</span>, content <span class="keyword">in</span> <span class="built_in">zip</span>(id_list, content_list):</span><br><span class="line">                    cur.execute(</span><br><span class="line">                        <span class="string">&quot;UPDATE L_SMS SET content = ? WHERE id = ?&quot;</span>, content, <span class="built_in">id</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                con.commit()  <span class="comment"># commit to database</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Direct pattern find and replace done!&quot;</span>)</span><br><span class="line">                direct_pattern[<span class="string">&#x27;handle&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">                <span class="comment"># cur.close()</span></span><br><span class="line">                <span class="comment"># con.close()</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>執行前，資料庫內有兩筆record符合我們的pattern<br><img src="https://i.imgur.com/b1b0K9F.png"></p>
<p>執行後，可那兩筆record已經被修改<br><img src="https://i.imgur.com/yf6UrMJ.png"></p>
<p>執行中<br><img src="https://i.imgur.com/9yPxqEf.png"></p>
<p><a href="https://github.com/mulongfu/SMS">Github Repo完整程式碼</a></p>
]]></content>
      <categories>
        <category>接案二三事</category>
      </categories>
      <tags>
        <tag>兼職</tag>
        <tag>接案</tag>
      </tags>
  </entry>
</search>
